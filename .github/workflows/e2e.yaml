---
name: E2E Tests
on: [push, pull_request]

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Setup golang
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Install minikube
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: 1.34.0
          kubernetes-version: v1.31.0
          cpus: 4
          memory: 4000m
          cni: bridge
      
      - name: Build external-snapshot-metadata image
        run: |
          make build-csi-snapshot-metadata
          minikube image build -f ./cmd/csi-snapshot-metadata/Dockerfile -t gcr.io/k8s-staging-sig-storage/csi-snapshot-metadata:main .

      - name: Install Dependencies
        run: |
          # Install openssl
          sudo apt-get update
          sudo apt-get install -y openssl

          # Install yq
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
          yq --version

          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client --output=yaml
      
      - name: Deploy Snapshot controller
        run: |
          bash scripts/deploy-snapshot-controller.sh deploy
      
      - name: Deploy csi-hostpath-driver
        run: |
          git clone https://github.com/kubernetes-csi/csi-driver-host-path.git ~/csi-driver-host-path
          # BELOW IMAGE is build from PR https://github.com/kubernetes-csi/csi-driver-host-path/pull/569
          # TODO: Replace with official image once it is released.
          HOSTPATHPLUGIN_REGISTRY="ghcr.io/ipraveenparihar" HOSTPATHPLUGIN_TAG="snapshot-metadata-service" ~/csi-driver-host-path/deploy/kubernetes-1.27/deploy.sh

      - name: Patch csi-hostpath-driver with csi-snapshot-metadata sidecar
        run: |
            bash scripts/deploy-snapshot-metadata.sh deploy
            kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=csi-hostpathplugin --timeout=300s
      
      - name: E2E
        run: |
          bash scripts/deploy-snapshot-metadata.sh deploy_client
          
          kubectl create -f ~/csi-driver-host-path/examples/csi-storageclass.yaml
          kubectl create -f ~/csi-driver-host-path/examples/csi-pvc-block.yaml
          
          # Failed to pull image "gcr.io/google_containers/busybox": 
          # [DEPRECATION NOTICE] Docker Image Format v1 and Docker Image manifest version 2, 
          # schema 1 support is disabled by default and will be removed in an upcoming release.
          # Suggest the author of gcr.io/google_containers/busybox:latest to upgrade the image to the OCI Format or Docker Image manifest v2, schema 2.
          # More information at https://docs.docker.com/go/deprecated-image-specs/
          yq -i '.spec.containers[0].image = "busybox:latest"' ~/csi-driver-host-path/examples/csi-pod-block.yaml
          yq -i '.spec.containers[0].volumeDevices[0].devicePath = "/dev/block"' ~/csi-driver-host-path/examples/csi-pod-block.yaml
          kubectl create -f ~/csi-driver-host-path/examples/csi-pod-block.yaml
          kubectl wait --for=condition=Ready pod/pod-raw --timeout=300s

          # write data into pod
          kubectl exec -i pod-raw -- sh -c "dd if=/dev/urandom of=/dev/block bs=8K count=1 oflag=direct"

          # take snaphot snap-1
          yq -i '.metadata.name = "snap-1"' ~/csi-driver-host-path/examples/csi-snapshot-v1.yaml
          yq -i '.spec.source.persistentVolumeClaimName = "pvc-raw"' ~/csi-driver-host-path/examples/csi-snapshot-v1.yaml
          kubectl create -f ~/csi-driver-host-path/examples/csi-snapshot-v1.yaml
          kubectl wait volumesnapshot snap-1 --for=jsonpath='{.status.readyToUse}'=true --timeout=300s

          # write data into pod
          kubectl exec -i pod-raw -- sh -c "dd if=/dev/urandom of=/dev/block bs=6K count=1 oflag=direct"

          # take snapshot snap-2
          yq -i '.metadata.name = "snap-2"' ~/csi-driver-host-path/examples/csi-snapshot-v1.yaml
          yq -i '.spec.source.persistentVolumeClaimName = "pvc-raw"' ~/csi-driver-host-path/examples/csi-snapshot-v1.yaml
          kubectl create -f ~/csi-driver-host-path/examples/csi-snapshot-v1.yaml
          kubectl wait volumesnapshot snap-2 --for=jsonpath='{.status.readyToUse}'=true --timeout=300s

          # call external-snapshot-metadata-client
          kubectl exec cbt-client -- bin/snapshot-metadata-lister -service-account cbt-client-sa -namespace default -previous-snapshot snap-1 -snapshot snap-2 -starting-offset 0 -max-results 2
          